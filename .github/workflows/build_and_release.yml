name: "Build and Release"
#dsafghj
on:
  workflow_dispatch:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  release:
    types:
      - released
  schedule:
    - cron: "0 0 * * *"

jobs:
  build-aria2c:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install prerequisites
        run: |
          sudo apt-get update
          # DEBIAN_FRONTEND=noninteractive sudo apt-get upgrade -y
          sudo apt-get install -y --no-install-recommends \
              make binutils autoconf automake autotools-dev libtool \
              patch ca-certificates g++-mingw-w64-x86-64 \
              pkg-config git wget curl dpkg-dev \
              autopoint libcppunit-dev lzip jq unzip lld zstd rsync bc
      - name: Compile
        env:
          CROSS_HOST: "x86_64-w64-mingw32"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/build.sh"
          "${GITHUB_WORKSPACE}/build.sh"
          
      - name: Output config.log (Always)
        if: always()
        run: |
          if [ -f aria2/config.log ]; then
              echo "Config.log content:"
              cat aria2/config.log
          else
              echo "config.log not found"
          fi
          
      - name: Archive aria2c.exe
        uses: actions/upload-artifact@v4
        with:
          name: aria2c.exe
          path: "${{ github.workspace }}/aria2c.exe"
      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: "${{ github.workspace }}/build_info.md"
  build-aria2c1:
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:rolling
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
              automake  autoconf autopoint jq libtool tcl tcl-dev \
              make pkg-config wget curl git \
              ca-certificates libcppunit-dev unzip lld zstd rsync bc
      - name: Compile
        env:
          CROSS_HOST: "x86_64-w64-mingw32"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/build1.sh"
          "${GITHUB_WORKSPACE}/build1.sh"
      - name: Upload sqlite config.log on failure
        if: failure() # 关键！同样只在失败时运行
        uses: actions/upload-artifact@v4 # 使用官方的上传工具
        with:
          name: sqlite-config-log # 上传后压缩包的名字
          path: /usr/src/sqlite-*/config.log # 要上传的文件的路径
      - name: Archive aria2c1.exe
        uses: actions/upload-artifact@v4
        with:
          name: aria2c1.exe
          path: "${{ github.workspace }}/aria2c1.exe"
      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info1
          path: "${{ github.workspace }}/build_info1.md"


  Release:
      runs-on: ubuntu-24.04
      needs: [build-aria2c, build-aria2c1]
      if: always()  # 始终运行，无论依赖任务状态
      steps:
        - name: Create release folder
          run: mkdir -p release-folder
          
        # 下载所有工件（忽略单一下载失败）
        - name: Download all artifacts
          uses: actions/download-artifact@v5
          with:
            path: release-folder
            merge-multiple: true
            continue-on-error: true
  
        # 检查是否存在可执行文件
        - name: Check artifacts existence
          id: check_artifacts
          run: |
            if ls release-folder/*.exe 1>/dev/null 2>&1; then
              echo "has_artifacts=true" >> $GITHUB_OUTPUT
            else
              echo "has_artifacts=false" >> $GITHUB_OUTPUT
            fi
  
        # 合并发布说明（安全处理空文件）
        - name: Create Release Notes File
          run: |
            find release-folder -name "*.md" -exec cat {} + > release-folder/release_notes.md 2>/dev/null || true
            touch release-folder/release_notes.md  # 确保文件存在
  
        - name: Get Aria2 Version
          run: |
            VERSION=$(curl -sL https://api.github.com/repos/aria2/aria2/releases/latest | jq -r '.tag_name | sub("release-"; "")')
            echo "ARIA2_VERSION=$VERSION" >> $GITHUB_ENV
  
        # 条件发布：仅当存在至少一个可执行文件
        - name: Create Release
          if: steps.check_artifacts.outputs.has_artifacts == 'true'
          uses: ncipollo/release-action@v1
          with:
            tag: aria2c-${{ env.ARIA2_VERSION }}
            allowUpdates: true
            artifacts: ${{ github.workspace }}/release-folder/*.exe
            bodyFile: "release-folder/release_notes.md"
            token: ${{ secrets.GITHUB_TOKEN }}
  
        # 友好提示无工件情况
        - name: Skip release (no artifacts)
          if: steps.check_artifacts.outputs.has_artifacts == 'false'
          run: echo "⚠️ No executable artifacts found. Release skipped."
