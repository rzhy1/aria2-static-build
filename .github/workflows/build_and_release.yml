name: "Build and Release"
#dsafasfdsafdsaf
on:
  workflow_dispatch:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  release:
    types:
      - released
  schedule:
    - cron: "0 0 * * *"

jobs:
  build-aria2c:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Find fastest apt mirror
        run: |
          echo "Testing mirror speeds..."
          
          # 镜像列表
          MIRRORS=(
            "archive.ubuntu.com"
            "ports.ubuntu.com"
            "mirrors.tencent.com"
            "mirrors.aliyun.com"
            "mirrors.tuna.tsinghua.edu.cn"
            "mirrors.ustc.edu.cn"
          )
          
          FASTEST_MIRROR=""
          FASTEST_TIME=999
          
          for mirror in "${MIRRORS[@]}"; do
            echo -n "Testing $mirror ... "
            
            # 测试下载速度（下载一个小文件并计算时间）
            START_TIME=$(date +%s.%N)
            if curl --connect-timeout 5 --max-time 10 --silent --fail \
                   "http://$mirror/ubuntu/dists/noble/Release.gpg" > /dev/null 2>&1; then
              END_TIME=$(date +%s.%N)
              TIME_DIFF=$(echo "$END_TIME - $START_TIME" | bc -l)
              TIME_MS=$(echo "$TIME_DIFF * 1000" | bc -l | cut -d. -f1)
              
              echo "${TIME_MS}ms"
              
              # 检查是否是最快的
              if [ $TIME_MS -lt $FASTEST_TIME ]; then
                FASTEST_TIME=$TIME_MS
                FASTEST_MIRROR=$mirror
              fi
            else
              echo "failed"
            fi
          done
          
          if [ -n "$FASTEST_MIRROR" ]; then
            echo "Fastest mirror: $FASTEST_MIRROR (${FASTEST_TIME}ms)"
            echo "FASTEST_MIRROR=$FASTEST_MIRROR" >> $GITHUB_ENV
          else
            echo "No working mirror found, using default"
            echo "FASTEST_MIRROR=archive.ubuntu.com" >> $GITHUB_ENV
          fi

      - name: Configure apt sources
        run: |
          echo "Configuring apt to use fastest mirror: $FASTEST_MIRROR"
          sudo sed -i "s|http://[a-z]*\.ubuntu\.com/ubuntu|http://$FASTEST_MIRROR/ubuntu|g" /etc/apt/sources.list
          sudo sed -i "s|http://security\.ubuntu\.com/ubuntu|http://$FASTEST_MIRROR/ubuntu|g" /etc/apt/sources.list
          
          # 显示配置结果
          echo "Updated apt sources:"
          grep "^deb " /etc/apt/sources.list
      - name: Install prerequisites
        run: |
          sudo apt-get update
          # DEBIAN_FRONTEND=noninteractive sudo apt-get upgrade -y
          sudo apt-get install -y --no-install-recommends \
              make binutils autoconf automake autotools-dev libtool \
              patch ca-certificates g++-mingw-w64-x86-64 \
              pkg-config git wget curl dpkg-dev \
              autopoint libcppunit-dev lzip jq unzip lld zstd rsync bc
      - name: Compile
        env:
          CROSS_HOST: "x86_64-w64-mingw32"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/build.sh"
          "${GITHUB_WORKSPACE}/build.sh"
          
      - name: Output config.log (Always)
        if: always()
        run: |
          if [ -f aria2/config.log ]; then
              echo "Config.log content:"
              cat aria2/config.log
          else
              echo "config.log not found"
          fi
          
      - name: Archive aria2c.exe
        uses: actions/upload-artifact@v5
        with:
          name: aria2c.exe
          path: "${{ github.workspace }}/aria2c.exe"
      - name: Upload build info
        uses: actions/upload-artifact@v5
        with:
          name: build-info
          path: "${{ github.workspace }}/build_info.md"
  build-aria2c1:
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:rolling
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
              automake  autoconf autopoint jq libtool tcl tcl-dev \
              make pkg-config wget curl git \
              ca-certificates libcppunit-dev unzip lld zstd rsync bc
      - name: Compile
        env:
          CROSS_HOST: "x86_64-w64-mingw32"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/build1.sh"
          "${GITHUB_WORKSPACE}/build1.sh"
      - name: Upload sqlite config.log on failure
        if: failure() # 关键！同样只在失败时运行
        uses: actions/upload-artifact@v5 # 使用官方的上传工具
        with:
          name: sqlite-config-log # 上传后压缩包的名字
          path: /usr/src/sqlite-*/config.log # 要上传的文件的路径
      - name: Archive aria2c1.exe
        uses: actions/upload-artifact@v5
        with:
          name: aria2c1.exe
          path: "${{ github.workspace }}/aria2c1.exe"
      - name: Upload build info
        uses: actions/upload-artifact@v5
        with:
          name: build-info1
          path: "${{ github.workspace }}/build_info1.md"


  Release:
    runs-on: ubuntu-24.04
    needs: [build-aria2c, build-aria2c1]
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v6
        with:
           path: release-folder
           merge-multiple: true
        continue-on-error: true
      - name: Create Release Notes File
        run: |
          cat release-folder/*.md > ${{ github.workspace }}/release-folder/release_notes.md
      - name: Get Aria2 Version
        run: |
          VERSION=$(wget -qO- https://raw.githubusercontent.com/aria2/aria2/master/NEWS | grep -oP 'aria2 \K\d+(\.\d+)*')
          echo "ARIA2_VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: aria2c-${{ env.ARIA2_VERSION }}
          allowUpdates: true
          artifacts: ${{ github.workspace }}/release-folder/*.exe
          bodyFile: ${{ github.workspace }}/release-folder/release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
