name: "Build and Release"

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  release:
    types:
      - released
  schedule:
    - cron: "0 0 * * *"

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - name: "aria2c_zlib_and_libexpat"
            build_script: "build.sh"
            artifact_name: "aria2c.exe"
            build_info_artifact: "build_info"
          - name: "aria2c1_zlib_ng_and_libxml2"
            build_script: "build1.sh"
            artifact_name: "aria2c1.exe"
            build_info_artifact: "build_info1"
    container:
      image: ubuntu:devel
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
              make binutils autoconf automake autotools-dev libtool \
              patch ca-certificates \
              pkg-config git wget curl dpkg-dev \
              autopoint libcppunit-dev lzip jq unzip lld rsync tcl

      - name: Compile
        env:
          CROSS_HOST: "x86_64-w64-mingw32"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/${{ matrix.build_script }}"
          "${GITHUB_WORKSPACE}/${{ matrix.build_script }}"

      - name: Archive Executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: "${{ github.workspace }}/${{ matrix.artifact_name }}"

      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_info_artifact }}
          path: "${{ github.workspace }}/${{ matrix.build_info_artifact }}.md"


  Release:
    runs-on: ubuntu-24.04
    needs: [build]
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
           path: release-folder1
        continue-on-error: true
      - name: Create Release Notes File
        run: |
          find release-folder1 -type f -exec sh -c 'mv {} release-folder' \;
          cat release-folder/*.md > ${{ github.workspace }}/release-folder/release_notes.md
      - name: Get Aria2 Version
        run: |
          VERSION=$(wget -qO- https://raw.githubusercontent.com/aria2/aria2/master/NEWS | grep -oP 'aria2 \K\d+(\.\d+)*')
          echo "ARIA2_VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: aria2c-${{ env.ARIA2_VERSION }}
          allowUpdates: true
          artifacts: ${{ github.workspace }}/release-folder/*.exe
          bodyFile: ${{ github.workspace }}/release-folder/release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
